
//
// 3Dify App
//
// Project website: https://github.com/3dify-app
//
// Authors:
// - Philipp Matthes 2020, Contact: mail@philippmatth.es
//
// Copyright notice: All rights reserved by the authors given above. Do not
// remove or change this copyright notice without confirmation of the authors.
//

kernel vec4 SobelFilter(sampler image) {
    // Initialize a horizontal filter kernel
    mat3 sx = mat3(
        1.0, 2.0, 1.0,
        0.0, 0.0, 0.0,
       -1.0, -2.0, -1.0
    );
    // Initialize the vertical filter kernel
    mat3 sy = mat3(
        1.0, 0.0, -1.0,
        2.0, 0.0, -2.0,
        1.0, 0.0, -1.0
    );

    // The destination of the current pixel in working space coordinates
    vec2 dWorkspace = destCoord();
    // The diffuse and depth values of the target pixel
    vec3 targetDiffusePixel = sample(image, samplerCoord(image)).rgb;

    // Sample the region around the target pixel
    mat3 targetPixelRegion;
    for (int x = 0; x < 3; x++) {
        for (int y = 0; y < 3; y++) {
            vec2 workingSpaceSampleCoordinate = dWorkspace + vec2(x, y);
            vec2 imageSpaceSampleCoordinate =
                samplerTransform(image, workingSpaceSampleCoordinate);
            vec3 sampleImagePixel = sample(image, imageSpaceSampleCoordinate).rgb;
            float averagePixelValue = sqrt(
                pow(sampleImagePixel.r, 2.0)
                + pow(sampleImagePixel.g, 2.0)
                + pow(sampleImagePixel.b, 2.0)
            );
            targetPixelRegion[x][y] = averagePixelValue;
        }
    }

    // Compute the image gradient
    float gx = dot(sx[0], targetPixelRegion[0])
               + dot(sx[1], targetPixelRegion[1])
               + dot(sx[2], targetPixelRegion[2]);
    float gy = dot(sy[0], targetPixelRegion[0])
               + dot(sy[1], targetPixelRegion[1])
               + dot(sy[2], targetPixelRegion[2]);
    float g = sqrt(pow(gx, 2.0) + pow(gy, 2.0));

    // Return a grayscale image
    return vec4(vec3(g), 1.0);
}
